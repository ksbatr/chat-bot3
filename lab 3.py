import re
import random
import datetime
import urllib.parse
import http.client
import json
import spacy
from textblob import TextBlob
from translate import Translator
from typing import Optional, Tuple

API_KEY = "API_KEY" 

class ToneAnalyzer:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ spaCy"""
        self.translator = Translator(to_lang="en", from_lang="ru")
        self.nlp = spacy.load("ru_core_news_sm")

    def translate_text(self, text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        try:
            return self.translator.translate(text).lower()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text

    def analyze_sentiment(self, text: str) -> Tuple[float, str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É + —ç–º–æ—Ü–∏—é
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è)
        """
        english_text = self.translate_text(text)
        blob = TextBlob(english_text)
        score = blob.sentiment.polarity * 100  
        
      
        if score > 30:
            emotion = random.choice(["–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! üòä", "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! üåü", "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üëç"])
        elif score < -30:
            emotion = random.choice(["–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å üòî", "–ù–∞–¥–µ—é—Å—å, –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è ü§ó", "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ ü´Ç"])
        else:
            emotion = random.choice(["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î", "–ü–æ–Ω—è—Ç–Ω–æ üòê", "–Ø –≤–∞—Å —Å–ª—É—à–∞—é üëÇ"])
        
        return score, emotion

    def analyze_text(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spaCy –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        doc = self.nlp(text)

       
        nouns = [token.text for token in doc if token.pos_ == "NOUN"]
        verbs = [token.text for token in doc if token.pos_ == "VERB"]
        adjectives = [token.text for token in doc if token.pos_ == "ADJ"]
        
        
        subjects = [token.text for token in doc if "subj" in token.dep_]
        predicates = [token.text for token in doc if "VERB" in token.dep_ or "ROOT" in token.dep_]

        response = (
            f"**–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:**\n"
            f"–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(set(nouns)) or '–ù–µ—Ç'}\n"
            f"–ì–ª–∞–≥–æ–ª—ã: {', '.join(set(verbs)) or '–ù–µ—Ç'}\n"
            f"–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ: {', '.join(set(adjectives)) or '–ù–µ—Ç'}\n"
            f"–ü–æ–¥–ª–µ–∂–∞—â–µ–µ: {', '.join(set(subjects)) or '–ù–µ—Ç'}\n"
            f"–°–∫–∞–∑—É–µ–º–æ–µ: {', '.join(set(predicates)) or '–ù–µ—Ç'}\n"
        )
        
        return response


responses = {
    r"–ø—Ä–∏–≤–µ—Ç": ["–î–æ–±—Ä—ã–π –¥–µ–Ω—å!", "–ü—Ä–∏–≤–µ—Ç!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"],
    r"–∫–∞–∫ –¥–µ–ª–∞\??": ["–û—Ç–ª–∏—á–Ω–æ!", "–•–æ—Ä–æ—à–æ", "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ", "–ù–µ–ø–ª–æ—Ö–æ, –∞ —É –≤–∞—Å?"],
    r"–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç\??|–∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π\??": ["–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç!", "–Ø –ø—Ä–æ—Å—Ç–æ —á–∞—Ç-–±–æ—Ç."],
    r"—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏": lambda: datetime.datetime.now().strftime("%H:%M:%S"),
    r"–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ": lambda: datetime.datetime.now().strftime("%d.%m.%Y"),
    r"–∫–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ\s+(.+)\??": "get_weather",
    r"(\d+)\s*([+\-\/*])\s*(\d+)": "calculate",
    r"–≤—ã—Ö–æ–¥": "exit",
    r"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\??|–∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏–∏\??|—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å\??": [
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É.",
        "–Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø–æ–≥–æ–¥–µ, –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –≤—ã—á–∏—Å–ª—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ—â–∞—Ç—å—Å—è.",
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å!"
    ],
    r"—Å–ø–∞—Å–∏–±–æ": ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!", "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!", "–ù–µ –∑–∞ —á—Ç–æ."],
    r"—Ö–æ—Ä–æ—à–æ|–Ω–æ—Ä–º–∞–ª—å–Ω–æ": ["–û—Ç–ª–∏—á–Ω–æ!"],
    r"—Ä–∞–∑–±–µ—Ä–∏ —Ç–µ–∫—Å—Ç (.+)": "analyze_text"
}

def calculate(match):
    try:
        num1 = int(match.group(1))
        operator = match.group(2)
        num2 = int(match.group(3))

        if operator == '+':
            result = num1 + num2
        elif operator == '-':
            result = num1 - num2
        elif operator == '*':
            result = num1 * num2
        elif operator == '/':
            if num2 == 0:
                return "–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è :(", None
            result = num1 / num2
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.", None

        return str(result), None
    except ValueError:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–µ–ª.", None

def get_weather(city):
    try:
        conn = http.client.HTTPSConnection("api.openweathermap.org")
        encoded_city = urllib.parse.quote(city)
        url = f"/data/2.5/weather?q={encoded_city}&appid={API_KEY}&units=metric&lang=ru"
        conn.request("GET", url)
        response = conn.getresponse()
        data = json.loads(response.read().decode("utf-8"))
        conn.close()

        temp = data["main"]["temp"]
        weather_desc = data["weather"][0]["description"]
        return f"–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {weather_desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C.", None
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {str(e)}", None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def process_message(message: str, analyzer: ToneAnalyzer) -> Tuple[str, Optional[float]]:
    message = message.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    for pattern, response in responses.items():
        match = re.search(pattern, message)
        if match:
            if callable(response):
                return response(), None
            elif response == "get_weather":
                return get_weather(match.group(1))
            elif response == "calculate":
                return calculate(match)
            elif response == "exit":
                return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. üëã", None
            elif response == "analyze_text":
                return analyzer.analyze_text(match.group(1)), None
            else:
                return random.choice(response), None
            
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    score, emotion = analyzer.analyze_sentiment(message)
    
    # –ü–æ–¥–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if score > 30:
        response_options = [
            f"{emotion} –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ!",
            f"–í–∞—à –Ω–∞—Å—Ç—Ä–æ–π –∑–∞—Ä–∞–∑–∏—Ç–µ–ª–µ–Ω! {emotion}",
            f"{emotion} –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        ]
    elif score < -30:
        response_options = [
            f"{emotion} –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —è –∑–¥–µ—Å—å.",
            f"–Ø —á—É–≤—Å—Ç–≤—É—é –≤–∞—à–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. {emotion}",
            f"{emotion} –•–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?"
        ]
    else:
        response_options = [
            f"{emotion} –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            f"{emotion} –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, —è –≤–∞—Å —Å–ª—É—à–∞—é.",
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. {emotion}"
        ]
    
    return random.choice(response_options), score

if __name__ == "__main__":
    analyzer = ToneAnalyzer()
    print("–ë–æ—Ç: –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å :)")
    
    while True:
        try:
            user_input = input("–í—ã: ")
            if user_input.lower() == '–≤—ã—Ö–æ–¥':
                print("–ë–æ—Ç: –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã")
                break
                
            response, score = process_message(user_input, analyzer)
            
            if score is not None:
                print(f"–ë–æ—Ç: {response} (–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {score:.1f}%)")
            else:
                print(f"–ë–æ—Ç: {response}")
                
        except KeyboardInterrupt:
            print("\n–ë–æ—Ç: –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
            break
        except Exception as e:
            print(f"–ë–æ—Ç: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
